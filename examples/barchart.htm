<html>

<head>
  <title>Bar Charts</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>

  <style>
    /* styles gridlines as grey */
    .gridlines line {
      stroke: #bbb;
    }

    /* this removes the gridline at the very top edge */
    .gridlines .domain {
      stroke: none;
    }
  </style>

</head>

<body>
  <div class="container larger">
    <h3>Bar Charts</h3>
    <p>
      Today we will go through some d3 examples from INFO3300 as a quick review. This class is primarily intended for
      those who need a quick d3 refresher.
    </p>

    <!-- set up the area for the scatterplot, as well as the location for texts -->
    <h5>HTML:</h5>
    <svg id="barchart" height="400" width="600" style="margin-top:50px">
      <text id="label" x="590" y="5" text-anchor="end" alignment-baseline="hanging"></text>
    </svg>


    <h5>Code:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>

    <script id="notes1">
      const bar = d3.select("svg#barchart");

      //save its attributes (width and height) in variables, and set up margin info
      const width = bar.attr("width");
      const height = bar.attr("height");
      const margin = { top: 10, right: 10, bottom: 50, left: 50 };

      const chartWidth = width - margin.left - margin.right;
      const chartHeight = height - margin.top - margin.bottom;

      //<g> tag to hold axes and labels
      let annotations = bar.append("g").attr("id", "annotations");

      //set up chartArea to hold the bars
      //this is translated so it doesn't overlap with the axes
      let chartArea = bar.append("g").attr("id", "points")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


      //async function prevents other code from running until data is loaded by using the await keyword
      //make sure to put all functions that use the data inside the async function
      const loadBar = async function () {
        let dataset = await d3.json("../datasets/titanic-barchart.json", d3.autoType);

        console.log(dataset);

        //we need to know the extent (min and max) of the data so we can fit it into the chart
        //we do this for both x and y
        //d3.extent returns [min, max]
        const ages = d3.map(dataset, d => d["age"]);
        //we treat the ages like categories, and use scaleBand to map them to the width of the chart
        const ageScale = d3.scaleBand().domain(ages).range([0, chartWidth]).padding(0.05);

        //extent of people who lived
        const livedExtent = d3.extent(dataset, d => d["lived"]);
        const livedScale = d3.scaleLinear().domain(livedExtent).range([chartHeight, 0]);

        //you can pass an optional d3.format() inside tickFormat to format strings
        //refer to https://d3js.org/d3-format for specifics
        let leftAxis = d3.axisLeft(livedScale);
        let leftGridlines = d3.axisLeft(livedScale).tickSize(-chartWidth - 10).tickFormat("");

        annotations.append("g")
          .attr("class", "y axis")
          .attr("transform", `translate(${margin.left - 10}, ${margin.top})`)
          .call(leftAxis);

        annotations.append("g")
          .attr("class", "y gridlines")
          .attr("transform", `translate(${margin.left - 10}, ${margin.top})`)
          .call(leftGridlines);

        let bottomAxis = d3.axisBottom(ageScale).tickFormat(d3.format("~f"));
        annotations.append("g")
          .attr("class", "x axis")
          .attr("transform", `translate(${margin.left}, ${chartHeight + margin.top + 10})`)
          .call(bottomAxis);


        console.log(ageScale.bandwidth());
        let rects = chartArea.selectAll("rect.bar").data(dataset)
          .join("rect")
          .attr("class", "bar")
          .attr("fill", "steelblue")
          .attr("x", d => ageScale(d['age']))
          .attr("y", d => livedScale(d['lived']))
          .attr("width", ageScale.bandwidth())
          .attr("height", d => livedScale(0) - livedScale(d['lived']));

        console.log("differences:", livedScale(0) - livedScale(100))
      }

      loadBar();

    </script>


    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>

      function sanitize(s) {
        return s.replace("<br>", "\\n")
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }
      document.getElementById("display1").innerHTML = sanitize(document.getElementById("notes1").innerText);
      hljs.highlightAll();
    </script>

  </div>
</body>

</html>